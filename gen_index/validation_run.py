import sys
import glob
import os.path
import json
import re
import codecs
import StringIO
import subprocess
import datetime

THISDIR=os.path.dirname(os.path.abspath(__file__))

# valueRe=re.compile(u"^([a-zA-Z ]+): ([A-Za-z0-9+. -]+)$")
# def analyze_readme(dir_name):
#     readme_data={u"Documentation status":u"stub",u"Data source":u"automatic conversion",u"License":u"none",u"Data available since":u"none"}
#     readmes=sorted(x for x in glob.glob(os.path.join(dir_name,"*")) if "readme" in x.lower())
#     if not readmes: #No readme file!
#         return readme_data
#     with codecs.open(readmes[0],"r","utf-8") as f:
#         for line in f:
#             line=line.strip()
#             match=valueRe.match(line)
#             if match: #Maybe one of our values?
#                 cat,val=match.groups()
#                 cat,val=cat.strip(),val.strip()
#                 if cat in readme_data:
#                     #Yes! this is a known category, we have a perfect match
#                     readme_data[cat]=val
#     return readme_data
                
def get_language_span(l):
    return """<span class="doublewidespan" style="padding-left:3em">{}</span>""".format(l.replace(u"_",u" "))

def get_wide_span(l):
    return """<span class="widespan">{}</span>""".format(l.replace(u"_",u" "))

def getzulutime():
    return datetime.datetime.utcnow().replace(microsecond=0).isoformat()

def run_validation(validation_cache,args):
    """Fills in the validation results to the cache"""

    with open(args.lcodes,"r") as f:
        lcodes=json.load(f)
    
    langs=sorted(map(os.path.basename,glob.glob(os.path.join(args.ud_data,"UD_*"))))
    for l in langs:
        outp=u""
        if l in validation_cache:
            continue
        cache={}
        validation_cache[l]=cache
        cache["timestamp"]=getzulutime()
        cache["lcode"]=lcodes[l.replace("UD_","")]
        cache["validates"]=True
        files=sorted(glob.glob(os.path.join(args.ud_data,l,"*.conllu")))
        cache["branch"]=u"xxx"
        if not files:
            cache["validates"]=False
            cache["outp"]=u"No data"
        else:
            for f in files:
                cmd=["python",os.path.join(args.ud_tools,"validate.py"),"--lang",cache["lcode"],f]
                outp+=u" ".join(cmd)
                p=subprocess.Popen(cmd,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
                out,err=p.communicate()
                out,err=unicode(out,"utf-8"),unicode(err,"utf-8")
                if out==None:
                    out=u""
                if err==None:
                    err=u""
                if p.returncode!=0:
                    cache["validates"]=False
                outp+=out
                outp+=u"\n\n"
                outp+=err
                outp+=u"\n\n******************\n\n"
            cache["outp"]=outp
    to_del=set(validation_cache.keys())-set(langs)
    for d in to_del:
        del validation_cache[d]

def load_validation_cache(fname):
    try:
        with open(fname,"r") as f:
            d=json.load(f)
            return d
    except:
        return {}

def save_validation_cache(d,fname):
    with open(fname,"w") as f:
        json.dump(d,f)
    

def gen_table(validation_cache):
    
    a_data=StringIO.StringIO()
    print >> a_data, u"<!-- content of _includes/validation.html -->"
    print >> a_data, u"<!-- do NOT edit by hand, that file is autogenerated using gen_index/validation_run.py -->"
    # Will create a line for every language which has a repository
    for l in sorted(validation_cache):
        cache=validation_cache[l]
        # readme_data=analyze_readme(os.path.join(args.ud_data,"UD_"+l))
        # if readme_data.get(u"Data available since") not in (u"UD v1.0",u"UD v1.1",u"UD v1.2"):
        #     print >> sys.stderr, "Skipping.", repr(readme_data.get(u"Data available since"))
        #     continue #Skip this language
        print >> a_data, u"<div>"
        print >> a_data, get_language_span(l)
        print >> a_data, get_wide_span(cache["lcode"])
        if cache["validates"]:
            print >> a_data, u"""<span class="validationpass">PASS</span>"""
        else:
            if cache["outp"]==u"No data":
                print >> a_data, u"""<span class="validationfail">EMPTY</span>"""
            else:
                print >> a_data, u"""<span class="validationfail">FAIL</span>"""
        # if cache["branch"]!=u"dev":
        #     print >> a_data, u"""<span class="validationfail">%s branch</span>"""%cache["branch"]
        # else:
        #     print >> a_data, u"""<span class="validationpass">dev branch</span>"""
        print >> a_data, u"""<span class="doublewidespan"> <time class="timeago" datetime="%(time)sZ">%(time)s zulu</time></span>"""%{"time":cache["timestamp"]}
        print >> a_data, u"</div>"

        print >> a_data, u"<div>"
        print >> a_data, u"<pre>"
        print >> a_data, cache["outp"]
        print >> a_data, u"</pre>"
        print >> a_data, u"</div>"
    return a_data



if __name__=="__main__":
    import argparse
    parser = argparse.ArgumentParser(description='generates the index page')
    parser.add_argument('--ud-data', required=True, help='Where is the UD data, so I can grab the readmes? (DIRECTORY)')
    parser.add_argument('--ud-tools', required=True, help='Where is the UD tools? (DIRECTORY)')
    parser.add_argument('--validation-cache', required=True, help='Where is the validation cache?')
    parser.add_argument('--lcodes', default=os.path.join(THISDIR,"lcodes.json"), help='Language codes file')
    parser.add_argument('--rerun', help="List of languages to rerun")
    parser.add_argument('--empty-cache', default=False, action="store_true", help="Rerun everything")
    args = parser.parse_args()

    validation_cache=load_validation_cache(args.validation_cache)
    if args.empty_cache:
        validation_cache={}
    elif args.rerun:
        for l in args.rerun.split(","):
            if l in validation_cache:
                del validation_cache[l]
                
    run_validation(validation_cache,args)            
    a_data=gen_table(validation_cache)
    print (u"""\
---
layout: base
title:  'Universal Dependencies --- validation runs prior to the v1.3 release'
udver: '2'
---

Regenerated: <time class="timeago" datetime="%(time)sZ">%(time)s zulu</time>

<div id="accordion" class="jquery-ui-accordion">
%(table)s
</div>
"""%{"time":datetime.datetime.utcnow().replace(microsecond=0).isoformat(),"table":a_data.getvalue()}).encode("utf-8")

    save_validation_cache(validation_cache,args.validation_cache)
